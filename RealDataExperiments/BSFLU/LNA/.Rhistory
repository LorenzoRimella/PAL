times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:5){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
print(i)
print(loglikelihood)
covSigma = array(c(0, q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
y
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
for (i in 1:3){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
print(i)
print(loglikelihood)
covSigma = array(c(0, q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:3){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
print(i)
print(loglikelihood)
covSigma = array(c(0, q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
Sigma_star
mu_star
x_prev
i = 4
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
x_next
ode(x_prev, times_grid, LNA_restart, parameters)
y
init_params <- c(2/pop_size, 0.5, 0.4, 5)
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:3){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
print(i)
print(loglikelihood)
covSigma = array(c(0, q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
Sigma_t
init_params <- c(2/pop_size, 0.5, 0.8, 5)
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:3){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
print(i)
print(loglikelihood)
covSigma = array(c(0, q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
x_next
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
v = mu_t[2]*q*(1-q)
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:3){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
print(i)
print(loglikelihood)
covSigma = array(c(0, q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
x_next
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
v = mu_t[2]*q*(1-q)
v
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
Sigma_l
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:3){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
#v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
print(i)
print(loglikelihood)
covSigma = array(c(0, q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
x_prev
y
y = bsflu$B
init_pop <- c(762,1,0)
pop_size <- sum(init_pop)
init_params <- c(2/pop_size, 0.5, 0.8, 5)
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
parameters
for (i in 1:3){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
print(i)
print(loglikelihood)
covSigma = array(c(0, q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
i =1
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
print(i)
print(loglikelihood)
covSigma = array(c(0, q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
(covSigma %*% t(covSigma))
covSigma
(1/(Sigma_l))*(covSigma %*% t(covSigma))
Sigma_t
Sigma_l
(1/(Sigma_l))*(covSigma %*% t(covSigma))
(covSigma %*% t(covSigma))
Sigma_t[2,2]
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
i=1
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
print(i)
print(loglikelihood)
covSigma = array(c(0, q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
(1/(Sigma_l))*(covSigma %*% t(covSigma))
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:3){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
print(i)
print(loglikelihood)
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:3){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
print(i)
print(loglikelihood)
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
Sigma_star
Sigma_t
(1/(Sigma_l))*(covSigma %*% t(covSigma))
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:5){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
print(i)
print(loglikelihood)
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:time_steps){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
print(i)
print(loglikelihood)
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:time_steps){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
loglikelihood
init_params
y
library(pomp)
y = bsflu$B
init_pop <- c(762,1,0)
pop_size <- sum(init_pop)
init_params <- c(2/pop_size, 0.5, 0.8, 5)
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:time_steps){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
# alternative:v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
loglikelihood
SIR_approx_lik_LNA <- function(y, init_pop, init_params){
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:time_steps){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
# alternative:v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
return(loglikelihood)
}
SIR_approx_filter_LNA <- function(y, init_pop, init_params){
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
mean_time  = array(NA, dim = c(time_steps, 2))
Sigma_time = array(NA, dim = c(time_steps, 2, 2))
for (i in 1:time_steps){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
# alternative:v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
mean_time[i,]   = mu_star
Sigma_time[i,,] = Sigma_star
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
output = dict()
output[["mean"]]  = mean_time
output[["Sigma"]] = Sigma_time
return(output)
}
SIR_approx_lik_LNA(y, init_pop, init_params)
filter        = SIR_approx_filter_LNA(y, init_pop, init_params)
SIR_approx_filter_LNA <- function(y, init_pop, init_params){
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
mean_time  = array(NA, dim = c(time_steps, 2))
Sigma_time = array(NA, dim = c(time_steps, 2, 2))
for (i in 1:time_steps){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
# alternative:v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
mean_time[i,]   = mu_star
Sigma_time[i,,] = Sigma_star
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
#output = dict()
#output[["mean"]]  = mean_time
#output[["Sigma"]] = Sigma_time
return(list(mean_time, Sigma_time))
}
library(pomp)
y = bsflu$B
init_pop = c(762,1,0)
pop_size = sum(init_pop)
init_params = c(2/pop_size, 0.5, 0.8, 5)
loglikelihood = SIR_approx_lik_LNA(y, init_pop, init_params)
filter        = SIR_approx_filter_LNA(y, init_pop, init_params)
filter
filter[1]
# Check the validity of the generated paths
source("LNA_ode_system.R")
# test likelihood computation on flu data
library(pomp)
y = bsflu$B
init_pop = c(762,1,0)
pop_size = sum(init_pop)
init_params = c(2/pop_size, 0.5, 0.8, 5)
loglikelihood = SIR_approx_lik_LNA(y, init_pop, init_params)
filter        = SIR_approx_filter_LNA(y, init_pop, init_params)
filter[1]
plot( filter[1][,1,1],                         col = "green", type = "l", lwd = 2, ylim = c(0, n))
filter[1][,1,1]
filter[1]
plot( filter[1][,1],                         col = "green", type = "l", lwd = 2, ylim = c(0, pop_size))
filter[1][,1]
filter[1]
mean = filter[1]
plot( mean[,1],                         col = "green", type = "l", lwd = 2, ylim = c(0, pop_size))
mean[,1]
mean[1,1]
mean
mean = filter[[1]]
plot( mean[,1],                         col = "green", type = "l", lwd = 2, ylim = c(0, pop_size))
lines(mean[,2],                         col = "red",   type = "l", lwd = 2)
lines(pop_size - mean[,1] - mean[,2], col = "blue",  type = "l", lwd = 2)
points(y)
