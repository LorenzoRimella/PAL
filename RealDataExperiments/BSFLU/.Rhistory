}
plot(gamma_grid,lik)
gamma_grid = seq(0.1, 1, length=50)
lik = c()
for(i in 1:length(gamma_grid)){
#print(i)
init_params <- array(c(2,gamma_grid[i],0.8))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(gamma_grid,lik)
beta_grid = seq(1, 3, length=50)
lik = c()
for(i in 1:length(beta_grid)){
#print(i)
init_params <- array(c(beta_grid[i], 0.5,0.8))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(beta_grid,lik)
beta_grid = seq(1, 5, length=50)
lik = c()
for(i in 1:length(beta_grid)){
#print(i)
init_params <- array(c(beta_grid[i], 0.5,0.8))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(beta_grid,lik)
beta_grid = seq(1, 10, length=50)
lik = c()
for(i in 1:length(beta_grid)){
#print(i)
init_params <- array(c(beta_grid[i], 0.5,0.8))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(beta_grid,lik)
beta_grid = seq(1, 10, length=50)
lik = c()
for(i in 1:length(beta_grid)){
#print(i)
init_params <- array(c(beta_grid[i]/763, 0.5,0.8))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(beta_grid,lik)
beta_grid = seq(1, 3, length=50)
lik = c()
for(i in 1:length(beta_grid)){
#print(i)
init_params <- array(c(beta_grid[i]/763, 0.5,0.8))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(beta_grid,lik)
gamma_grid = seq(0.1, 1, length=50)
lik = c()
for(i in 1:length(gamma_grid)){
#print(i)
init_params <- array(c(2/763,gamma_grid[i],0.8))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(gamma_grid,lik)
beta_grid = seq(1, 3, length=50)
lik = c()
for(i in 1:length(beta_grid)){
#print(i)
init_params <- array(c(beta_grid[i]/763, 0.5,0.8))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(beta_grid,lik)
q_grid
q_grid = seq(0.1, 1, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params <- array(c(0.2/763, 0.5,q_grid[i]))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(q_grid,lik)
q_grid = seq(0.1, 1, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params <- array(c(2/763, 0.5, q_grid[i]))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(q_grid,lik)
q_grid = seq(0.1, 2, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params <- array(c(2/763, 0.5, q_grid[i]))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(q_grid,lik)
q_grid = seq(0.1, 1.5, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params <- array(c(2/763, 0.5, q_grid[i]))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(q_grid,lik)
q_grid = seq(0.6, 1.2, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params <- array(c(2/763, 0.5, q_grid[i]))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(q_grid,lik)
SIR_approx_lik_LNA <- function(y, init_pop, init_params){
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
parameters[1] = parameters[1]/
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:time_steps){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
# alternative:v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
return(loglikelihood)
}
library(Rcpp)
library(pomp)
library(deSolve)
source('bsflu_mcmc.R')
source("LNA/LNA_ode_system.R")
################ REAL DATA
## Set initial distribution and load real data:
init_pop <- c(762,1,0)
load('data/SIRsim500k')
y <- sim
gamma_grid = seq(0.1, 1, length=50)
lik = c()
for(i in 1:length(gamma_grid)){
#print(i)
init_params <- array(c(2/763,gamma_grid[i],0.8, 1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(gamma_grid,lik)
beta_grid = seq(1, 3, length=50)
lik = c()
for(i in 1:length(beta_grid)){
#print(i)
init_params <- array(c(beta_grid[i]/763, 0.5,0.8,1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(beta_grid,lik)
q_grid = seq(0.6, 1.2, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params <- array(c(2/763, 0.5, q_grid[i],1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(q_grid,lik)
LNA_restart <- function(t, state, parameters){
eta   = state[1:2]
m     = state[3:4]
Sigma = state[5:8]
Sigma = aperm(array(Sigma, dim = c(2,2)))
beta_param  = parameters[1]
gamma_param = parameters[2]
S = eta[1]
I = eta[2]
At = aperm(array(c(-1, 0, 1, -1), dim = c(2,2)))
h  = array(c(beta_param*S*I, gamma_param*I), dim = c(2,1))
F_ = aperm(array(c(-beta_param*I, -beta_param*S, beta_param*I, (beta_param*S) - gamma_param), dim = c(2,2)))
H  = matrix(0, ncol=2, nrow=2)
diag(H) = h
deta_dt = At %*% h
dm_dt   = F_ %*% m
dPsi_dt = (Sigma %*% t(F_)) + (F_ %*% Sigma) + (At %*% (H %*% t(At)))
return(list(c(deta_dt, dm_dt, array(t(dPsi_dt), dim = c(4)))))
}
SIR_approx_lik_LNA <- function(y, init_pop, init_params){
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
parameters[1] = parameters[1]/
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:time_steps){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
# alternative:v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
return(loglikelihood)
}
SIR_approx_filter_LNA <- function(y, init_pop, init_params){
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
v          = init_params[4]
mean_time  = array(NA, dim = c(time_steps, 2))
Sigma_time = array(NA, dim = c(time_steps, 2, 2))
for (i in 1:time_steps){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
# alternative:v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
mean_time[i,]   = mu_star
Sigma_time[i,,] = Sigma_star
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
#output = dict()
#output[["mean"]]  = mean_time
#output[["Sigma"]] = Sigma_time
return(list(mean_time, Sigma_time))
}
q_grid = seq(0.6, 1.2, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params <- array(c(2/763, 0.5, q_grid[i],1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(q_grid,lik)
q_grid = seq(0.6, 1.2, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params <- array(c(2/763, 0.5, q_grid[i],1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
q_grid = seq(0.6, 1.2, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params = array(c(2/763, 0.5, q_grid[i],1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
SIR_approx_lik_LNA <- function(y, init_pop, init_params){
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
parameters[1] = parameters[1]/763
q          = init_params[3]
v          = init_params[4]
loglikelihood = 0
for (i in 1:time_steps){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
# alternative:v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
return(loglikelihood)
}
q_grid = seq(0.6, 1.2, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params = array(c(2/763, 0.5, q_grid[i],1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(q_grid,lik)
q_grid = seq(0.6, 3, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params = array(c(2/763, 0.5, q_grid[i],1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(q_grid,lik)
q_grid = seq(0.6, 6, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params = array(c(2/763, 0.5, q_grid[i],1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
q_grid = seq(0.6, 6, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params = array(c(2, 0.5, q_grid[i],1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(q_grid,lik)
q_grid = seq(0.6, 1, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params = array(c(2, 0.5, q_grid[i],1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(q_grid,lik)
q_grid = seq(0.6, 1.5, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params = array(c(2, 0.5, q_grid[i],1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(q_grid,lik)
q_grid = seq(0.6, 1.5, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params = array(c(2, 0.5, q_grid[i],0.1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(q_grid,lik)
q_grid = seq(0.6, 1.5, length=50)
lik = c()
for(i in 1:length(q_grid)){
#print(i)
init_params = array(c(2, 0.5, q_grid[i],10))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(q_grid,lik)
gamma_grid = seq(0.1, 1, length=50)
lik = c()
for(i in 1:length(gamma_grid)){
#print(i)
init_params <- array(c(2,gamma_grid[i],0.8, 1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(gamma_grid,lik)
beta_grid = seq(1, 3, length=50)
lik = c()
for(i in 1:length(beta_grid)){
#print(i)
init_params <- array(c(beta_grid[i], 0.5,0.8,1))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
plot(beta_grid,lik)
################ REAL DATA
## Set initial distribution and load real data:
init_real <- c(762,1,0)
y <- bsflu$B
#
mcmc_chain_real <- LNA_mcmc(y, init_real, c(2,0.5,0.8,1), 500, rw_params = c(0.4,0.05,0.1,0.5))
ts.plot(mcmc_chain_real$param_samples[1,])
ts.plot(mcmc_chain_real$param_samples[2,])
ts.plot(mcmc_chain_real$param_samples[3,])
ts.plot(mcmc_chain_real$param_samples[4,])
SIR_approx_filter_LNA <- function(y, init_pop, init_params){
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
#v          = init_params[4]
mean_time  = array(NA, dim = c(time_steps, 2))
Sigma_time = array(NA, dim = c(time_steps, 2, 2))
for (i in 1:time_steps){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
# alternative:
v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
mean_time[i,]   = mu_star
Sigma_time[i,,] = Sigma_star
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
#output = dict()
#output[["mean"]]  = mean_time
#output[["Sigma"]] = Sigma_time
return(list(mean_time, Sigma_time))
}
################ REAL DATA
## Set initial distribution and load real data:
init_real <- c(762,1,0)
y <- bsflu$B
## Run mcmc or load pre run chains
mcmc_chain_real <- LNA_mcmc_3param(y, init_real, c(2,0.5,0.8), 1000, rw_params = c(0.4,0.05,0.1))
SIR_approx_filter_LNA <- function(y, init_pop, init_params){
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
q          = init_params[3]
#v          = init_params[4]
mean_time  = array(NA, dim = c(time_steps, 2))
Sigma_time = array(NA, dim = c(time_steps, 2, 2))
for (i in 1:time_steps){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
# alternative:
v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
mean_time[i,]   = mu_star
Sigma_time[i,,] = Sigma_star
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
#output = dict()
#output[["mean"]]  = mean_time
#output[["Sigma"]] = Sigma_time
return(list(mean_time, Sigma_time))
}
################ REAL DATA
## Set initial distribution and load real data:
init_real <- c(762,1,0)
y <- bsflu$B
## Run mcmc or load pre run chains
mcmc_chain_real <- LNA_mcmc_3param(y, init_real, c(2,0.5,0.8), 1000, rw_params = c(0.4,0.05,0.1))
################ REAL DATA
## Set initial distribution and load real data:
init_pop <- c(762,1,0)
load('data/SIRsim500k')
y <- sim
gamma_grid = seq(0.1, 1, length=50)
lik = c()
for(i in 1:length(gamma_grid)){
#print(i)
init_params <- array(c(2,gamma_grid[i],0.8))
lik[i] = SIR_approx_lik_LNA(y, init_pop, init_params)
}
SIR_approx_lik_LNA <- function(y, init_pop, init_params){
times_grid = seq(0, 1, by = 0.1)
time_steps = length(y)
x_prev     = array(c(init_pop[1:2], 0,0, 0,0,0,0), dim = c(8,1))
parameters = init_params[1:2]
parameters[1] = parameters[1]/763
q          = init_params[3]
#v          = init_params[4]
loglikelihood = 0
for (i in 1:time_steps){
x_next = array(ode(x_prev, times_grid, LNA_restart, parameters)[11,2:9], dim = c(8, 1))
mu_t    = x_next[1:2]
Sigma_t = matrix(x_next[5:8], ncol = 2)
# alternative:
v = mu_t[2]*q*(1-q)
mu_l   = q*mu_t[2]
Sigma_l= q*q*Sigma_t[2,2] + v
loglikelihood = loglikelihood + dnorm(y[i], mean = mu_l, sd = sqrt(Sigma_l), log = T)
covSigma = array(c(q*Sigma_t[1,2], q*Sigma_t[2,2]), dim = c(2,1))
mu_star    = mu_t    + ((y[i] - mu_l)/(Sigma_l))*covSigma
Sigma_star = Sigma_t - (1/(Sigma_l))*(covSigma %*% t(covSigma))
x_prev = array(c(mu_star, 0,0, array(Sigma_star, dim = c(4))), dim = c(8, 1))
}
return(loglikelihood)
}
################ REAL DATA
## Set initial distribution and load real data:
init_real <- c(762,1,0)
y <- bsflu$B
## Run mcmc or load pre run chains
mcmc_chain_real <- LNA_mcmc_3param(y, init_real, c(2,0.5,0.8), 1000, rw_params = c(0.4,0.05,0.1))
ts.plot(mcmc_chain_real$param_samples[1,])
ts.plot(mcmc_chain_real$param_samples[2,])
ts.plot(mcmc_chain_real$param_samples[3,])
t1 = Sys.time()
mcmc_chain_real <- LNA_mcmc_3param(y, init_real, c(2,0.5,0.8), 10, rw_params = c(0.4,0.05,0.07))
t2 = Sys.time()
t2-t1
1.6*50000
80000/60
1333/60
library(Rcpp)
library(pomp)
library(deSolve)
sourceCpp('cpp/SIR_simulator.cpp')
sourceCpp('cpp/Approx_SIR_filter.cpp')
sourceCpp('cpp/SIR_particle_filter.cpp')
source('bsflu_mcmc.R')
source("LNA/LNA_ode_system.R")
t1pmcmc <- Sys.time()
pmcmc_chain <- pmcmc_bsflu(sim, init, c(2,0.5,0.8), 1000, 10,  rw_params = c(0.5,0.1,0.22))
t2pmcmc <- Sys.time()
################ Simulation study
#Set simulation parameters
init <- c(763-1,1,0)
t1pmcmc <- Sys.time()
pmcmc_chain <- pmcmc_bsflu(sim, init, c(2,0.5,0.8), 1000, 10,  rw_params = c(0.5,0.1,0.22))
t2pmcmc <- Sys.time()
22/5
